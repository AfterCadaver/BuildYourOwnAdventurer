[gd_scene load_steps=5 format=2]

[ext_resource path="res://Stages/Layer_1.tres" type="TileSet" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends TileMap

export (NoiseTexture) var noise

var start_present = false
var end_present = false

export var grid_size = 16
export var draw = true

var player_grid_position = Vector2.ZERO
var current_grid_position = Vector2.ZERO

var tiles = []
var real_tiles = []

var points = []

var colors = [Color.white,
			Color.yellow,
			Color.orange,
			Color.red,
			Color.blue]

func _draw():
	for x in 150:
		for y in 150:
			var rect = Rect2(x *16, y *16, 16,16)
			return
			draw_rect(rect, colors[get_cell(x,y)], true)

func _ready():
	#for coords in create_river(Vector2.ZERO, Vector2(10,7)):
		#set_cellv(coords, 0)
		
	pass

func create_pathway(points_array:Array, width: int, height:int):
	for point in create_river(points_array):
		for a in range(width):
			for b in range(height):
				set_cell(point.x + a, point.y + b, 2)

func generate_chunk(dimensions:Vector2):
	var that = round(rand_range(0,20))
	print(that)
	for x in range(dimensions.x):
		var row = []
		tiles.append(row)
		
		for y in range(dimensions.y):
			
			var chosen_tile = -1
			
			var noise_value = noise.noise.get_noise_2d(x, y)
			
			if noise_value >= -.2:
				chosen_tile = 0
			
			row.append(calculate_tile_density(x,y))
			
			set_cell(x,y, chosen_tile)
			
			if noise_value == 0:
				points.append(Vector2(x,y))
				
	update_bitmask_region(Vector2.ZERO, Vector2(500,500))
	
	$TileMap.update_bitmask_region(Vector2.ZERO, Vector2(500,500))
	update_dirty_quadrants()


func create_river(a, b):
	
	#CURRENTLY ABLE TO draw a line  from point a to point b about one pixel thick
	
	var tiles = []
	
	var now_tile = a
	var end_tile = b
	
	var end_direction = (b-a).normalized()
	
	var next_tile = Vector2(round(end_direction.x), round(end_direction.y))
	
	while now_tile != end_tile:
		end_direction = (end_tile-now_tile).normalized()
	
		next_tile = Vector2(round(end_direction.x), round(end_direction.y))
		now_tile += next_tile
		
		print(now_tile)
		tiles.append(now_tile)
		
	
	return tiles
	
	
func calculate_tile_density(x, y):
	
	var this
	var direct_neighbors = 0
	for r in range(2):
		for j in range(2):
			direct_neighbors += stepify(noise.noise.get_noise_2d(x + j - 1, y + r -1), 1)
			
	return abs(direct_neighbors)

func calculate_grid_position():
	print(player_grid_position)
	
func set_region(starting_point:Vector2):
	
	
	for x in range(55):
		for y in range(55):
			
			var noise_value = noise.noise.get_noise_2d(x, y)
			
			set_cell(x,y, 1)
	
"

[sub_resource type="OpenSimplexNoise" id=2]
period = 44.5
persistence = 0.571

[sub_resource type="NoiseTexture" id=3]
width = 128
height = 128
seamless = true
noise = SubResource( 2 )

[node name="Arena" type="TileMap"]
modulate = Color( 1, 1, 1, 0.529412 )
tile_set = ExtResource( 2 )
cell_size = Vector2( 16, 16 )
format = 1
script = SubResource( 1 )
noise = SubResource( 3 )
grid_size = null
draw = false

[node name="TileMap" type="TileMap" parent="."]
z_index = 2
tile_set = ExtResource( 2 )
cell_size = Vector2( 16, 16 )
format = 1

[node name="TileMap2" type="TileMap" parent="."]
z_index = -1
tile_set = ExtResource( 2 )
cell_size = Vector2( 16, 16 )
format = 1

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 538.029, 297.447 )
current = true
